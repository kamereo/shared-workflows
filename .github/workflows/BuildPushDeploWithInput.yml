name: Build and Push Docker Image to ECR + Deploy on EKS

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        type: choise
        options:
          - prod
          - qa
        default: qa
      branch:
        decription: 'Branch/Tag'
        required: true
        default: qa
      repo:
        required: true
        description: 'Repository'
        type: choise
        options:
          - accountservice
          - authservice
          - BuyerGraphQL
          - buyerservice
          - cartservice
          - cerberus
          - itemsearch
          - orderservice
          - SupplierGraphQL
          - supplierservice
          - zippy
          - ProductRecommendationService
          - BannerService
          - BuyerPage        


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.BUILD_TOOLS_DEPLOY_KEY }}
        repository: 'kamereo/${{ github.event.inputs.repo }}'
        ref: ${{ github.event.inputs.branch }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACTION_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.ACTION_ACCESS_SECRET }}
        aws-region: 'ap-southeast-1'
    
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 015648027364.dkr.ecr.ap-southeast-1.amazonaws.com

    - name: Prepare ENV
      id: build_env
      run: |
        REPOSITORY_LC=$(echo "kamereo/${{ github.event.inputs.repo }}" | tr '[:upper:]' '[:lower:]')
        echo "repository_name=$(echo $REPOSITORY_LC | cut -d/ -f2)"
        echo "repository=$REPOSITORY_LC" >> "$GITHUB_OUTPUT" # steps.build_env.outputs.repository
        echo "image_tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"
        echo "image_repo=015648027364.dkr.ecr.ap-southeast-1.amazonaws.com/$REPOSITORY_LC" >> "$GITHUB_OUTPUT"

    - name: Check if Docker Image Exists
      id: image_exists
      run: |

        if aws ecr describe-images --repository-name ${{ steps.build_env.outputs.repository }} --image-ids imageTag=${{ steps.build_env.outputs.image_tag }} --region ap-southeast-1; then
          echo "Image exists. Skipping build."
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Image does not exist. Proceeding with build."
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Determine Dockerfile
      if: steps.image_exists.outputs.exists == 'false'
      id: dockerfile
      run: |
        if [ -f ${{ github.event.inputs.repo }}/Dockerfile_${{ github.event.inputs.env }} ]; then
          echo "path=${{ github.event.inputs.repo }}/Dockerfile_${{ github.event.inputs.env }}" >> "$GITHUB_OUTPUT"
        else
          echo "path=${{ github.event.inputs.repo }}/Dockerfile" >> "$GITHUB_OUTPUT"
        fi

    - name: Build and Push Docker Image
      if: steps.image_exists.outputs.exists == 'false'
      run: |

        docker build --pull \
          --build-arg AWS_DEFAULT_REGION="ap-southeast-1" \
          --build-arg AWS_ACCESS_KEY_ID \
          --build-arg AWS_SECRET_ACCESS_KEY \
          --build-arg AWS_SESSION_TOKEN \
          --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }} \
          --build-arg APP_ENV=${{ github.event.inputs.env }} \
          -f ${{ steps.dockerfile.outputs.path }} \
          -t ${{ steps.build_env.outputs.image_repo }}:${{ steps.build_env.outputs.image_tag }} .
          
        aws ecr create-repository --region ap-southeast-1 --repository-name ${{ steps.build_env.outputs.repository }} --image-tag-mutability IMMUTABLE || true
        docker push ${{ steps.build_env.outputs.image_repo }}:${{ steps.build_env.outputs.image_tag }}

