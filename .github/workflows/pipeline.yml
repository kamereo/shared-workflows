name: Build and deploy to Kamereo EKS 

on:
  # push:
  #   branches:
  #     - main
  #     - master
  #     - qa 
  workflow_dispatch:
  workflow_call:      

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACTION_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.ACTION_ACCESS_SECRET }}
        aws-region: 'ap-southeast-1'
    
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 015648027364.dkr.ecr.ap-southeast-1.amazonaws.com

    - name: Prepare ENV
      id: build_env
      run: |
        if [[ ${{ github.ref_name }} =~ '(main|master)']]; then
          echo "Branch name must be 'qa/main/master'"
          exit 1
        if [[ ${{ github.ref_name }} =~ '(main|master)']]; then
          ENV=prod
        else
          ENV=qa
        fi
        echo "environment=$ENV" >> "$GITHUB_OUTPUT"
        ## BUILD envs
        REPOSITORY_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "repository_name=$(echo $REPOSITORY_LC | cut -d/ -f2)" >> "$GITHUB_OUTPUT"
        echo "repository=$REPOSITORY_LC" >> "$GITHUB_OUTPUT" 
        echo "image_tag=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        echo "image_repo=015648027364.dkr.ecr.ap-southeast-1.amazonaws.com/$REPOSITORY_LC" >> "$GITHUB_OUTPUT"
        ## DEPLOY envs
        echo "cluster_arn=arn:aws:eks:ap-southeast-1:015648027364:cluster/$ENV" >> "$GITHUB_OUTPUT"
        if [ -f deployment_$ENV.yaml ]; then
          echo "helm_value_param=\"-f deployment.yaml -f deployment_$ENV.yaml\"" "$GITHUB_OUTPUT"
        else
          echo "helm_value_param=\"-f deployment.yaml\"" >> "$GITHUB_OUTPUT"
        fi
        if [[ "$REPOSITORY_LC" =~ "internal" ]]; then
          echo "namespace=internal" >> "$GITHUB_OUTPUT"
        else
          echo "namespace=kamereo" >> "$GITHUB_OUTPUT"
        fi  

    - name: Check if Docker Image Exists
      id: image_exists
      run: |

        if aws ecr describe-images --repository-name ${{ steps.build_env.outputs.repository }} --image-ids imageTag=${{ steps.build_env.outputs.image_tag }} --region ap-southeast-1; then
          echo "Image exists. Skipping build."
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "Image does not exist. Proceeding with build."
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Determine Dockerfile
      if: steps.image_exists.outputs.exists == 'false'
      id: dockerfile
      run: |
        if [ -f Dockerfile_${{ steps.build_env.outputs.environment }} ]; then
          echo "path=Dockerfile_${{ steps.build_env.outputs.environment }}" >> "$GITHUB_OUTPUT"
        else
          echo "path=Dockerfile" >> "$GITHUB_OUTPUT"
        fi

    - name: Checkout build-tools
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.BUILD_TOOLS_DEPLOY_KEY }}
        repository: 'kamereo/build-tools'
        ref: main
        path: build-tools

    - name: Build and Push Docker Image
      if: steps.image_exists.outputs.exists == 'false'
      run: |
        ## init script 
        cp -r build-tools/gradle-init.d gradle/
        ## build
        docker build --pull \
          --build-arg AWS_DEFAULT_REGION="ap-southeast-1" \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.ACTION_ACCESS_KEY }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.ACTION_ACCESS_SECRET }} \
          --build-arg AWS_SESSION_TOKEN \
          --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }} \
          --build-arg APP_ENV=${{ steps.build_env.outputs.environment }} \
          -f ${{ steps.dockerfile.outputs.path }} \
          -t ${{ steps.build_env.outputs.image_repo }}:${{ steps.build_env.outputs.image_tag }} .
          
        aws ecr create-repository --region ap-southeast-1 --repository-name ${{ steps.build_env.outputs.repository }} --image-tag-mutability IMMUTABLE || true
        docker push ${{ steps.build_env.outputs.image_repo }}:${{ steps.build_env.outputs.image_tag }}
    
 
  deploy:
    needs: ['build-and-push']
    runs-on: ubuntu-latest
    steps:
    - uses: trstringer/manual-approval@v1
      if: job.build-and-push.outputs.environment == 'prod'    
      with:
        secret: ${{ secrets.GH_TOKEN }}
        approvers: approver

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        repository: 'kamereo/deployment'
        ref: master
        path: deployment    

    - name: Update kubeconfig
      run: |
        aws eks --region ap-southeast-1  update-kubeconfig --name ${{ steps.build_env.outputs.environment }}
        
    - name: Set up Helm 
      uses: azure/setup-helm@v4.1.0

    - name: Deploy to ${{ job.build-and-push.outputs.environment }} EKS 
      run: |
        . deployment/jenkins/helpers/assume_role.sh
        assume_role arn:aws:iam::015648027364:role/CI-deployment GithubActions-${{ github.run_id }}
        helm upgrade --install ${{ job.build-and-push.outputs.repository_name }} -n ${{ job.build-and-push.outputs.namespace }} deployment/helm/charts/generic --set image.tag=${{ job.build-and-push.outputs.image_tag }} --set image.repository=${{ job.build-and-push.outputs.image_repo }} --kube-context=${{ job.build-and-push.outputs.cluster_arn }} ${{ job.build-and-push.outputs.helm_value_param }} 